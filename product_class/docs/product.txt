The class product will have at first three attributes: name, description, price.

Create string representation of the class:

    1 - __str__: used to return a user-friendly string representation of an object
    typically for display or printing purposes.

    2 - __repr__: return a more technical and detailed string representation of an
    object. It is usually used for debugging, testing, and developing purposes.


Writing a unit test for Product class using the decorator "@pytest.fixture".

import pytest
from product import Product

@pytest.fixture
def product():
    return Product('PS5', 'Console Gamer', 4500)

class TestProduct:
    def test_name(self, product):
        assert product.name == 'PS5'

    def test_description(self, product):
        assert product.description == 'Console Gamer'

    def test_price(self, product):
        assert product.price == 4500

    def test_str(self, product):
        assert str(product) == "Product: name=PS5, description=Console Gamer, price=4500"

    def test_repr(self, product):
        assert repr(product) == "Product('PS5', 'Console Gamer', 4500)"

In this example, a product fixture is created using the @pytest.fixture decorator, 
which returns a Product instance. Then, a test class TestProduct is created, 
and each test case uses the product fixture as input to test each attribute, 
the __str__ and __repr__ methods of the Product class.